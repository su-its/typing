// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/su-its/typing/typing-server/domain/repository/ent/score"
	"github.com/su-its/typing/typing-server/domain/repository/ent/user"
)

// Score is the model entity for the Score schema.
type Score struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Keystrokes holds the value of the "keystrokes" field.
	Keystrokes int `json:"keystrokes,omitempty"`
	// Accuracy holds the value of the "accuracy" field.
	Accuracy float64 `json:"accuracy,omitempty"`
	// 条件を満たす結果のうち、Userのkeystrokesが最大のもの
	IsMaxKeystrokes bool `json:"is_max_keystrokes,omitempty"`
	// 条件を満たす結果のうち、Userのaccuracyが最大のもの
	IsMaxAccuracy bool `json:"is_max_accuracy,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScoreQuery when eager-loading is set.
	Edges        ScoreEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScoreEdges holds the relations/edges for other nodes in the graph.
type ScoreEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScoreEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Score) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case score.FieldIsMaxKeystrokes, score.FieldIsMaxAccuracy:
			values[i] = new(sql.NullBool)
		case score.FieldAccuracy:
			values[i] = new(sql.NullFloat64)
		case score.FieldKeystrokes:
			values[i] = new(sql.NullInt64)
		case score.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case score.FieldID, score.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Score fields.
func (s *Score) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case score.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case score.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				s.UserID = *value
			}
		case score.FieldKeystrokes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field keystrokes", values[i])
			} else if value.Valid {
				s.Keystrokes = int(value.Int64)
			}
		case score.FieldAccuracy:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field accuracy", values[i])
			} else if value.Valid {
				s.Accuracy = value.Float64
			}
		case score.FieldIsMaxKeystrokes:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_max_keystrokes", values[i])
			} else if value.Valid {
				s.IsMaxKeystrokes = value.Bool
			}
		case score.FieldIsMaxAccuracy:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_max_accuracy", values[i])
			} else if value.Valid {
				s.IsMaxAccuracy = value.Bool
			}
		case score.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Score.
// This includes values selected through modifiers, order, etc.
func (s *Score) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Score entity.
func (s *Score) QueryUser() *UserQuery {
	return NewScoreClient(s.config).QueryUser(s)
}

// Update returns a builder for updating this Score.
// Note that you need to call Score.Unwrap() before calling this method if this Score
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Score) Update() *ScoreUpdateOne {
	return NewScoreClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Score entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Score) Unwrap() *Score {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Score is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Score) String() string {
	var builder strings.Builder
	builder.WriteString("Score(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", s.UserID))
	builder.WriteString(", ")
	builder.WriteString("keystrokes=")
	builder.WriteString(fmt.Sprintf("%v", s.Keystrokes))
	builder.WriteString(", ")
	builder.WriteString("accuracy=")
	builder.WriteString(fmt.Sprintf("%v", s.Accuracy))
	builder.WriteString(", ")
	builder.WriteString("is_max_keystrokes=")
	builder.WriteString(fmt.Sprintf("%v", s.IsMaxKeystrokes))
	builder.WriteString(", ")
	builder.WriteString("is_max_accuracy=")
	builder.WriteString(fmt.Sprintf("%v", s.IsMaxAccuracy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Scores is a parsable slice of Score.
type Scores []*Score
