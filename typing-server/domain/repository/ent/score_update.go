// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/su-its/typing/typing-server/domain/repository/ent/predicate"
	"github.com/su-its/typing/typing-server/domain/repository/ent/score"
	"github.com/su-its/typing/typing-server/domain/repository/ent/user"
)

// ScoreUpdate is the builder for updating Score entities.
type ScoreUpdate struct {
	config
	hooks    []Hook
	mutation *ScoreMutation
}

// Where appends a list predicates to the ScoreUpdate builder.
func (su *ScoreUpdate) Where(ps ...predicate.Score) *ScoreUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUserID sets the "user_id" field.
func (su *ScoreUpdate) SetUserID(u uuid.UUID) *ScoreUpdate {
	su.mutation.SetUserID(u)
	return su
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableUserID(u *uuid.UUID) *ScoreUpdate {
	if u != nil {
		su.SetUserID(*u)
	}
	return su
}

// SetKeystrokes sets the "keystrokes" field.
func (su *ScoreUpdate) SetKeystrokes(i int) *ScoreUpdate {
	su.mutation.ResetKeystrokes()
	su.mutation.SetKeystrokes(i)
	return su
}

// SetNillableKeystrokes sets the "keystrokes" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableKeystrokes(i *int) *ScoreUpdate {
	if i != nil {
		su.SetKeystrokes(*i)
	}
	return su
}

// AddKeystrokes adds i to the "keystrokes" field.
func (su *ScoreUpdate) AddKeystrokes(i int) *ScoreUpdate {
	su.mutation.AddKeystrokes(i)
	return su
}

// SetAccuracy sets the "accuracy" field.
func (su *ScoreUpdate) SetAccuracy(f float64) *ScoreUpdate {
	su.mutation.ResetAccuracy()
	su.mutation.SetAccuracy(f)
	return su
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableAccuracy(f *float64) *ScoreUpdate {
	if f != nil {
		su.SetAccuracy(*f)
	}
	return su
}

// AddAccuracy adds f to the "accuracy" field.
func (su *ScoreUpdate) AddAccuracy(f float64) *ScoreUpdate {
	su.mutation.AddAccuracy(f)
	return su
}

// SetIsMaxKeystrokes sets the "is_max_keystrokes" field.
func (su *ScoreUpdate) SetIsMaxKeystrokes(b bool) *ScoreUpdate {
	su.mutation.SetIsMaxKeystrokes(b)
	return su
}

// SetNillableIsMaxKeystrokes sets the "is_max_keystrokes" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableIsMaxKeystrokes(b *bool) *ScoreUpdate {
	if b != nil {
		su.SetIsMaxKeystrokes(*b)
	}
	return su
}

// ClearIsMaxKeystrokes clears the value of the "is_max_keystrokes" field.
func (su *ScoreUpdate) ClearIsMaxKeystrokes() *ScoreUpdate {
	su.mutation.ClearIsMaxKeystrokes()
	return su
}

// SetIsMaxAccuracy sets the "is_max_accuracy" field.
func (su *ScoreUpdate) SetIsMaxAccuracy(b bool) *ScoreUpdate {
	su.mutation.SetIsMaxAccuracy(b)
	return su
}

// SetNillableIsMaxAccuracy sets the "is_max_accuracy" field if the given value is not nil.
func (su *ScoreUpdate) SetNillableIsMaxAccuracy(b *bool) *ScoreUpdate {
	if b != nil {
		su.SetIsMaxAccuracy(*b)
	}
	return su
}

// ClearIsMaxAccuracy clears the value of the "is_max_accuracy" field.
func (su *ScoreUpdate) ClearIsMaxAccuracy() *ScoreUpdate {
	su.mutation.ClearIsMaxAccuracy()
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *ScoreUpdate) SetUser(u *User) *ScoreUpdate {
	return su.SetUserID(u.ID)
}

// Mutation returns the ScoreMutation object of the builder.
func (su *ScoreUpdate) Mutation() *ScoreMutation {
	return su.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (su *ScoreUpdate) ClearUser() *ScoreUpdate {
	su.mutation.ClearUser()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScoreUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScoreUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScoreUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScoreUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ScoreUpdate) check() error {
	if _, ok := su.mutation.UserID(); su.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Score.user"`)
	}
	return nil
}

func (su *ScoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(score.Table, score.Columns, sqlgraph.NewFieldSpec(score.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Keystrokes(); ok {
		_spec.SetField(score.FieldKeystrokes, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedKeystrokes(); ok {
		_spec.AddField(score.FieldKeystrokes, field.TypeInt, value)
	}
	if value, ok := su.mutation.Accuracy(); ok {
		_spec.SetField(score.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedAccuracy(); ok {
		_spec.AddField(score.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.IsMaxKeystrokes(); ok {
		_spec.SetField(score.FieldIsMaxKeystrokes, field.TypeBool, value)
	}
	if su.mutation.IsMaxKeystrokesCleared() {
		_spec.ClearField(score.FieldIsMaxKeystrokes, field.TypeBool)
	}
	if value, ok := su.mutation.IsMaxAccuracy(); ok {
		_spec.SetField(score.FieldIsMaxAccuracy, field.TypeBool, value)
	}
	if su.mutation.IsMaxAccuracyCleared() {
		_spec.ClearField(score.FieldIsMaxAccuracy, field.TypeBool)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   score.UserTable,
			Columns: []string{score.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   score.UserTable,
			Columns: []string{score.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{score.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScoreUpdateOne is the builder for updating a single Score entity.
type ScoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScoreMutation
}

// SetUserID sets the "user_id" field.
func (suo *ScoreUpdateOne) SetUserID(u uuid.UUID) *ScoreUpdateOne {
	suo.mutation.SetUserID(u)
	return suo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableUserID(u *uuid.UUID) *ScoreUpdateOne {
	if u != nil {
		suo.SetUserID(*u)
	}
	return suo
}

// SetKeystrokes sets the "keystrokes" field.
func (suo *ScoreUpdateOne) SetKeystrokes(i int) *ScoreUpdateOne {
	suo.mutation.ResetKeystrokes()
	suo.mutation.SetKeystrokes(i)
	return suo
}

// SetNillableKeystrokes sets the "keystrokes" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableKeystrokes(i *int) *ScoreUpdateOne {
	if i != nil {
		suo.SetKeystrokes(*i)
	}
	return suo
}

// AddKeystrokes adds i to the "keystrokes" field.
func (suo *ScoreUpdateOne) AddKeystrokes(i int) *ScoreUpdateOne {
	suo.mutation.AddKeystrokes(i)
	return suo
}

// SetAccuracy sets the "accuracy" field.
func (suo *ScoreUpdateOne) SetAccuracy(f float64) *ScoreUpdateOne {
	suo.mutation.ResetAccuracy()
	suo.mutation.SetAccuracy(f)
	return suo
}

// SetNillableAccuracy sets the "accuracy" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableAccuracy(f *float64) *ScoreUpdateOne {
	if f != nil {
		suo.SetAccuracy(*f)
	}
	return suo
}

// AddAccuracy adds f to the "accuracy" field.
func (suo *ScoreUpdateOne) AddAccuracy(f float64) *ScoreUpdateOne {
	suo.mutation.AddAccuracy(f)
	return suo
}

// SetIsMaxKeystrokes sets the "is_max_keystrokes" field.
func (suo *ScoreUpdateOne) SetIsMaxKeystrokes(b bool) *ScoreUpdateOne {
	suo.mutation.SetIsMaxKeystrokes(b)
	return suo
}

// SetNillableIsMaxKeystrokes sets the "is_max_keystrokes" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableIsMaxKeystrokes(b *bool) *ScoreUpdateOne {
	if b != nil {
		suo.SetIsMaxKeystrokes(*b)
	}
	return suo
}

// ClearIsMaxKeystrokes clears the value of the "is_max_keystrokes" field.
func (suo *ScoreUpdateOne) ClearIsMaxKeystrokes() *ScoreUpdateOne {
	suo.mutation.ClearIsMaxKeystrokes()
	return suo
}

// SetIsMaxAccuracy sets the "is_max_accuracy" field.
func (suo *ScoreUpdateOne) SetIsMaxAccuracy(b bool) *ScoreUpdateOne {
	suo.mutation.SetIsMaxAccuracy(b)
	return suo
}

// SetNillableIsMaxAccuracy sets the "is_max_accuracy" field if the given value is not nil.
func (suo *ScoreUpdateOne) SetNillableIsMaxAccuracy(b *bool) *ScoreUpdateOne {
	if b != nil {
		suo.SetIsMaxAccuracy(*b)
	}
	return suo
}

// ClearIsMaxAccuracy clears the value of the "is_max_accuracy" field.
func (suo *ScoreUpdateOne) ClearIsMaxAccuracy() *ScoreUpdateOne {
	suo.mutation.ClearIsMaxAccuracy()
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *ScoreUpdateOne) SetUser(u *User) *ScoreUpdateOne {
	return suo.SetUserID(u.ID)
}

// Mutation returns the ScoreMutation object of the builder.
func (suo *ScoreUpdateOne) Mutation() *ScoreMutation {
	return suo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (suo *ScoreUpdateOne) ClearUser() *ScoreUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// Where appends a list predicates to the ScoreUpdate builder.
func (suo *ScoreUpdateOne) Where(ps ...predicate.Score) *ScoreUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScoreUpdateOne) Select(field string, fields ...string) *ScoreUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Score entity.
func (suo *ScoreUpdateOne) Save(ctx context.Context) (*Score, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScoreUpdateOne) SaveX(ctx context.Context) *Score {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScoreUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScoreUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ScoreUpdateOne) check() error {
	if _, ok := suo.mutation.UserID(); suo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Score.user"`)
	}
	return nil
}

func (suo *ScoreUpdateOne) sqlSave(ctx context.Context) (_node *Score, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(score.Table, score.Columns, sqlgraph.NewFieldSpec(score.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Score.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, score.FieldID)
		for _, f := range fields {
			if !score.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != score.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Keystrokes(); ok {
		_spec.SetField(score.FieldKeystrokes, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedKeystrokes(); ok {
		_spec.AddField(score.FieldKeystrokes, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Accuracy(); ok {
		_spec.SetField(score.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedAccuracy(); ok {
		_spec.AddField(score.FieldAccuracy, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.IsMaxKeystrokes(); ok {
		_spec.SetField(score.FieldIsMaxKeystrokes, field.TypeBool, value)
	}
	if suo.mutation.IsMaxKeystrokesCleared() {
		_spec.ClearField(score.FieldIsMaxKeystrokes, field.TypeBool)
	}
	if value, ok := suo.mutation.IsMaxAccuracy(); ok {
		_spec.SetField(score.FieldIsMaxAccuracy, field.TypeBool, value)
	}
	if suo.mutation.IsMaxAccuracyCleared() {
		_spec.ClearField(score.FieldIsMaxAccuracy, field.TypeBool)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   score.UserTable,
			Columns: []string{score.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   score.UserTable,
			Columns: []string{score.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Score{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{score.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
