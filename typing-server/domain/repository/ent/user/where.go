// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/su-its/typing/typing-server/domain/repository/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// StudentNumber applies equality check predicate on the "student_number" field. It's identical to StudentNumberEQ.
func StudentNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStudentNumber, v))
}

// HandleName applies equality check predicate on the "handle_name" field. It's identical to HandleNameEQ.
func HandleName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHandleName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// StudentNumberEQ applies the EQ predicate on the "student_number" field.
func StudentNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStudentNumber, v))
}

// StudentNumberNEQ applies the NEQ predicate on the "student_number" field.
func StudentNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldStudentNumber, v))
}

// StudentNumberIn applies the In predicate on the "student_number" field.
func StudentNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldStudentNumber, vs...))
}

// StudentNumberNotIn applies the NotIn predicate on the "student_number" field.
func StudentNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldStudentNumber, vs...))
}

// StudentNumberGT applies the GT predicate on the "student_number" field.
func StudentNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldStudentNumber, v))
}

// StudentNumberGTE applies the GTE predicate on the "student_number" field.
func StudentNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldStudentNumber, v))
}

// StudentNumberLT applies the LT predicate on the "student_number" field.
func StudentNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldStudentNumber, v))
}

// StudentNumberLTE applies the LTE predicate on the "student_number" field.
func StudentNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldStudentNumber, v))
}

// StudentNumberContains applies the Contains predicate on the "student_number" field.
func StudentNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldStudentNumber, v))
}

// StudentNumberHasPrefix applies the HasPrefix predicate on the "student_number" field.
func StudentNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldStudentNumber, v))
}

// StudentNumberHasSuffix applies the HasSuffix predicate on the "student_number" field.
func StudentNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldStudentNumber, v))
}

// StudentNumberEqualFold applies the EqualFold predicate on the "student_number" field.
func StudentNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldStudentNumber, v))
}

// StudentNumberContainsFold applies the ContainsFold predicate on the "student_number" field.
func StudentNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldStudentNumber, v))
}

// HandleNameEQ applies the EQ predicate on the "handle_name" field.
func HandleNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHandleName, v))
}

// HandleNameNEQ applies the NEQ predicate on the "handle_name" field.
func HandleNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHandleName, v))
}

// HandleNameIn applies the In predicate on the "handle_name" field.
func HandleNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHandleName, vs...))
}

// HandleNameNotIn applies the NotIn predicate on the "handle_name" field.
func HandleNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHandleName, vs...))
}

// HandleNameGT applies the GT predicate on the "handle_name" field.
func HandleNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHandleName, v))
}

// HandleNameGTE applies the GTE predicate on the "handle_name" field.
func HandleNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHandleName, v))
}

// HandleNameLT applies the LT predicate on the "handle_name" field.
func HandleNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHandleName, v))
}

// HandleNameLTE applies the LTE predicate on the "handle_name" field.
func HandleNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHandleName, v))
}

// HandleNameContains applies the Contains predicate on the "handle_name" field.
func HandleNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHandleName, v))
}

// HandleNameHasPrefix applies the HasPrefix predicate on the "handle_name" field.
func HandleNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHandleName, v))
}

// HandleNameHasSuffix applies the HasSuffix predicate on the "handle_name" field.
func HandleNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHandleName, v))
}

// HandleNameEqualFold applies the EqualFold predicate on the "handle_name" field.
func HandleNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHandleName, v))
}

// HandleNameContainsFold applies the ContainsFold predicate on the "handle_name" field.
func HandleNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHandleName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasScores applies the HasEdge predicate on the "scores" edge.
func HasScores() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScoresTable, ScoresColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScoresWith applies the HasEdge predicate on the "scores" edge with a given conditions (other predicates).
func HasScoresWith(preds ...predicate.Score) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newScoresStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
