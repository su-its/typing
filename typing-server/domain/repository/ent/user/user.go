// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStudentNumber holds the string denoting the student_number field in the database.
	FieldStudentNumber = "student_number"
	// FieldHandleName holds the string denoting the handle_name field in the database.
	FieldHandleName = "handle_name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeScores holds the string denoting the scores edge name in mutations.
	EdgeScores = "scores"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ScoresTable is the table that holds the scores relation/edge.
	ScoresTable = "scores"
	// ScoresInverseTable is the table name for the Score entity.
	// It exists in this package in order to avoid circular dependency with the "score" package.
	ScoresInverseTable = "scores"
	// ScoresColumn is the table column denoting the scores relation/edge.
	ScoresColumn = "user_scores"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldStudentNumber,
	FieldHandleName,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// StudentNumberValidator is a validator for the "student_number" field. It is called by the builders before save.
	StudentNumberValidator func(string) error
	// HandleNameValidator is a validator for the "handle_name" field. It is called by the builders before save.
	HandleNameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStudentNumber orders the results by the student_number field.
func ByStudentNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStudentNumber, opts...).ToFunc()
}

// ByHandleName orders the results by the handle_name field.
func ByHandleName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandleName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByScoresCount orders the results by scores count.
func ByScoresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScoresStep(), opts...)
	}
}

// ByScores orders the results by scores terms.
func ByScores(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScoresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newScoresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScoresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScoresTable, ScoresColumn),
	)
}
