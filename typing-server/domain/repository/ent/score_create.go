// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/su-its/typing/typing-server/domain/repository/ent/score"
	"github.com/su-its/typing/typing-server/domain/repository/ent/user"
)

// ScoreCreate is the builder for creating a Score entity.
type ScoreCreate struct {
	config
	mutation *ScoreMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (sc *ScoreCreate) SetUserID(u uuid.UUID) *ScoreCreate {
	sc.mutation.SetUserID(u)
	return sc
}

// SetKeystrokes sets the "keystrokes" field.
func (sc *ScoreCreate) SetKeystrokes(i int) *ScoreCreate {
	sc.mutation.SetKeystrokes(i)
	return sc
}

// SetAccuracy sets the "accuracy" field.
func (sc *ScoreCreate) SetAccuracy(f float64) *ScoreCreate {
	sc.mutation.SetAccuracy(f)
	return sc
}

// SetIsMaxKeystrokes sets the "is_max_keystrokes" field.
func (sc *ScoreCreate) SetIsMaxKeystrokes(b bool) *ScoreCreate {
	sc.mutation.SetIsMaxKeystrokes(b)
	return sc
}

// SetNillableIsMaxKeystrokes sets the "is_max_keystrokes" field if the given value is not nil.
func (sc *ScoreCreate) SetNillableIsMaxKeystrokes(b *bool) *ScoreCreate {
	if b != nil {
		sc.SetIsMaxKeystrokes(*b)
	}
	return sc
}

// SetIsMaxAccuracy sets the "is_max_accuracy" field.
func (sc *ScoreCreate) SetIsMaxAccuracy(b bool) *ScoreCreate {
	sc.mutation.SetIsMaxAccuracy(b)
	return sc
}

// SetNillableIsMaxAccuracy sets the "is_max_accuracy" field if the given value is not nil.
func (sc *ScoreCreate) SetNillableIsMaxAccuracy(b *bool) *ScoreCreate {
	if b != nil {
		sc.SetIsMaxAccuracy(*b)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *ScoreCreate) SetCreatedAt(t time.Time) *ScoreCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ScoreCreate) SetNillableCreatedAt(t *time.Time) *ScoreCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ScoreCreate) SetID(u uuid.UUID) *ScoreCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ScoreCreate) SetNillableID(u *uuid.UUID) *ScoreCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *ScoreCreate) SetUser(u *User) *ScoreCreate {
	return sc.SetUserID(u.ID)
}

// Mutation returns the ScoreMutation object of the builder.
func (sc *ScoreCreate) Mutation() *ScoreMutation {
	return sc.mutation
}

// Save creates the Score in the database.
func (sc *ScoreCreate) Save(ctx context.Context) (*Score, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScoreCreate) SaveX(ctx context.Context) *Score {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScoreCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScoreCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScoreCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := score.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := score.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScoreCreate) check() error {
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Score.user_id"`)}
	}
	if _, ok := sc.mutation.Keystrokes(); !ok {
		return &ValidationError{Name: "keystrokes", err: errors.New(`ent: missing required field "Score.keystrokes"`)}
	}
	if _, ok := sc.mutation.Accuracy(); !ok {
		return &ValidationError{Name: "accuracy", err: errors.New(`ent: missing required field "Score.accuracy"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Score.created_at"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Score.user"`)}
	}
	return nil
}

func (sc *ScoreCreate) sqlSave(ctx context.Context) (*Score, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScoreCreate) createSpec() (*Score, *sqlgraph.CreateSpec) {
	var (
		_node = &Score{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(score.Table, sqlgraph.NewFieldSpec(score.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Keystrokes(); ok {
		_spec.SetField(score.FieldKeystrokes, field.TypeInt, value)
		_node.Keystrokes = value
	}
	if value, ok := sc.mutation.Accuracy(); ok {
		_spec.SetField(score.FieldAccuracy, field.TypeFloat64, value)
		_node.Accuracy = value
	}
	if value, ok := sc.mutation.IsMaxKeystrokes(); ok {
		_spec.SetField(score.FieldIsMaxKeystrokes, field.TypeBool, value)
		_node.IsMaxKeystrokes = value
	}
	if value, ok := sc.mutation.IsMaxAccuracy(); ok {
		_spec.SetField(score.FieldIsMaxAccuracy, field.TypeBool, value)
		_node.IsMaxAccuracy = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(score.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   score.UserTable,
			Columns: []string{score.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScoreCreateBulk is the builder for creating many Score entities in bulk.
type ScoreCreateBulk struct {
	config
	err      error
	builders []*ScoreCreate
}

// Save creates the Score entities in the database.
func (scb *ScoreCreateBulk) Save(ctx context.Context) ([]*Score, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Score, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScoreCreateBulk) SaveX(ctx context.Context) []*Score {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScoreCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScoreCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
